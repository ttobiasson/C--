-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Fun/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pMain -> Main                               (1)
	%start_pDef -> Def                                 (2)
	%start_pListDef -> ListDef                         (3)
	%start_pListIdent -> ListIdent                     (4)
	%start_pExp3 -> Exp3                               (5)
	%start_pExp2 -> Exp2                               (6)
	%start_pExp1 -> Exp1                               (7)
	%start_pExp -> Exp                                 (8)
	Ident -> L_ident                                   (9)
	Integer -> L_integ                                 (10)
	Program -> ListDef Main                            (11)
	Main -> 'main' '=' 'print' Exp3 ';'                (12)
	Def -> Ident ListIdent '=' Exp                     (13)
	ListDef ->                                         (14)
	ListDef -> ListDef Def ';'                         (15)
	ListIdent ->                                       (16)
	ListIdent -> Ident ListIdent                       (17)
	Exp3 -> Ident                                      (18)
	Exp3 -> Integer                                    (19)
	Exp3 -> '(' Exp ')'                                (20)
	Exp2 -> Exp2 Exp3                                  (21)
	Exp2 -> Exp3                                       (22)
	Exp1 -> Exp1 '+' Exp2                              (23)
	Exp1 -> Exp1 '-' Exp2                              (24)
	Exp1 -> Exp1 '<' Exp2                              (25)
	Exp1 -> Exp2                                       (26)
	Exp -> 'if' Exp 'then' Exp 'else' Exp              (27)
	Exp -> '\\' Ident '->' Exp                         (28)
	Exp -> Exp1                                        (29)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'+'            { PT _ (TS _ 3) }
	'-'            { PT _ (TS _ 4) }
	'->'           { PT _ (TS _ 5) }
	';'            { PT _ (TS _ 6) }
	'<'            { PT _ (TS _ 7) }
	'='            { PT _ (TS _ 8) }
	'\\'           { PT _ (TS _ 9) }
	'else'         { PT _ (TS _ 10) }
	'if'           { PT _ (TS _ 11) }
	'main'         { PT _ (TS _ 12) }
	'print'        { PT _ (TS _ 13) }
	'then'         { PT _ (TS _ 14) }
	L_ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pMain    rule  1
	%start_pDef     rule  2
	%start_pListDef rule  3
	%start_pListIdent rule  4
	%start_pExp3    rule  5
	%start_pExp2    rule  6
	%start_pExp1    rule  7
	%start_pExp     rule  8
	Ident           rule  9
	Integer         rule  10
	Program         rule  11
	Main            rule  12
	Def             rule  13
	ListDef         rules 14, 15
	ListIdent       rules 16, 17
	Exp3            rules 18, 19, 20
	Exp2            rules 21, 22
	Exp1            rules 23, 24, 25, 26
	Exp             rules 27, 28, 29

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'main'         reduce using rule 14
	L_ident        reduce using rule 14

	Program        goto state 31
	ListDef        goto state 32

State 1


	'main'         shift, and enter state 30

	Main           goto state 29

State 2


	L_ident        shift, and enter state 10

	Ident          goto state 27
	Def            goto state 28

State 3


	L_ident        reduce using rule 14
	%eof           reduce using rule 14

	ListDef        goto state 26

State 4


	L_ident        shift, and enter state 10
	%eof           reduce using rule 16

	Ident          goto state 24
	ListIdent      goto state 25

State 5


	'('            shift, and enter state 17
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 23

State 6


	'('            shift, and enter state 17
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 13
	Exp2           goto state 22

State 7


	'('            shift, and enter state 17
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 13
	Exp2           goto state 14
	Exp1           goto state 21

State 8


	'('            shift, and enter state 17
	'\\'           shift, and enter state 18
	'if'           shift, and enter state 19
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 13
	Exp2           goto state 14
	Exp1           goto state 15
	Exp            goto state 16

State 9


	L_ident        shift, and enter state 10


State 10

	Ident -> L_ident .                                  (rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'->'           reduce using rule 9
	';'            reduce using rule 9
	'<'            reduce using rule 9
	'='            reduce using rule 9
	'else'         reduce using rule 9
	'then'         reduce using rule 9
	L_ident        reduce using rule 9
	L_integ        reduce using rule 9
	%eof           reduce using rule 9


State 11

	Exp3 -> Ident .                                     (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	';'            reduce using rule 18
	'<'            reduce using rule 18
	'else'         reduce using rule 18
	'then'         reduce using rule 18
	L_ident        reduce using rule 18
	L_integ        reduce using rule 18
	%eof           reduce using rule 18


State 12

	Exp3 -> Integer .                                   (rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	';'            reduce using rule 19
	'<'            reduce using rule 19
	'else'         reduce using rule 19
	'then'         reduce using rule 19
	L_ident        reduce using rule 19
	L_integ        reduce using rule 19
	%eof           reduce using rule 19


State 13

	Exp2 -> Exp3 .                                      (rule 22)

	'('            reduce using rule 22
	')'            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	';'            reduce using rule 22
	'<'            reduce using rule 22
	'else'         reduce using rule 22
	'then'         reduce using rule 22
	L_ident        reduce using rule 22
	L_integ        reduce using rule 22
	%eof           reduce using rule 22


State 14

	Exp2 -> Exp2 . Exp3                                 (rule 21)
	Exp1 -> Exp2 .                                      (rule 26)

	'('            shift, and enter state 17
	')'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	';'            reduce using rule 26
	'<'            reduce using rule 26
	'else'         reduce using rule 26
	'then'         reduce using rule 26
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20
	%eof           reduce using rule 26

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 38

State 15

	Exp1 -> Exp1 . '+' Exp2                             (rule 23)
	Exp1 -> Exp1 . '-' Exp2                             (rule 24)
	Exp1 -> Exp1 . '<' Exp2                             (rule 25)
	Exp -> Exp1 .                                       (rule 29)

	')'            reduce using rule 29
	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	';'            reduce using rule 29
	'<'            shift, and enter state 41
	'else'         reduce using rule 29
	'then'         reduce using rule 29
	%eof           reduce using rule 29


State 16

	%start_pExp -> Exp .                                (rule 8)

	%eof           accept


State 17

	Exp3 -> '(' . Exp ')'                               (rule 20)

	'('            shift, and enter state 17
	'\\'           shift, and enter state 18
	'if'           shift, and enter state 19
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 13
	Exp2           goto state 14
	Exp1           goto state 15
	Exp            goto state 44

State 18

	Exp -> '\\' . Ident '->' Exp                        (rule 28)

	L_ident        shift, and enter state 10

	Ident          goto state 43

State 19

	Exp -> 'if' . Exp 'then' Exp 'else' Exp             (rule 27)

	'('            shift, and enter state 17
	'\\'           shift, and enter state 18
	'if'           shift, and enter state 19
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 13
	Exp2           goto state 14
	Exp1           goto state 15
	Exp            goto state 42

State 20

	Integer -> L_integ .                                (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	';'            reduce using rule 10
	'<'            reduce using rule 10
	'else'         reduce using rule 10
	'then'         reduce using rule 10
	L_ident        reduce using rule 10
	L_integ        reduce using rule 10
	%eof           reduce using rule 10


State 21

	%start_pExp1 -> Exp1 .                              (rule 7)
	Exp1 -> Exp1 . '+' Exp2                             (rule 23)
	Exp1 -> Exp1 . '-' Exp2                             (rule 24)
	Exp1 -> Exp1 . '<' Exp2                             (rule 25)

	'+'            shift, and enter state 39
	'-'            shift, and enter state 40
	'<'            shift, and enter state 41
	%eof           accept


State 22

	%start_pExp2 -> Exp2 .                              (rule 6)
	Exp2 -> Exp2 . Exp3                                 (rule 21)

	'('            shift, and enter state 17
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20
	%eof           accept

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 38

State 23

	%start_pExp3 -> Exp3 .                              (rule 5)

	%eof           accept


State 24

	ListIdent -> Ident . ListIdent                      (rule 17)

	'='            reduce using rule 16
	L_ident        shift, and enter state 10
	%eof           reduce using rule 16

	Ident          goto state 24
	ListIdent      goto state 37

State 25

	%start_pListIdent -> ListIdent .                    (rule 4)

	%eof           accept


State 26

	%start_pListDef -> ListDef .                        (rule 3)
	ListDef -> ListDef . Def ';'                        (rule 15)

	L_ident        shift, and enter state 10
	%eof           accept

	Ident          goto state 27
	Def            goto state 34

State 27

	Def -> Ident . ListIdent '=' Exp                    (rule 13)

	'='            reduce using rule 16
	L_ident        shift, and enter state 10

	Ident          goto state 24
	ListIdent      goto state 36

State 28

	%start_pDef -> Def .                                (rule 2)

	%eof           accept


State 29

	%start_pMain -> Main .                              (rule 1)

	%eof           accept


State 30

	Main -> 'main' . '=' 'print' Exp3 ';'               (rule 12)

	'='            shift, and enter state 35


State 31

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 32

	Program -> ListDef . Main                           (rule 11)
	ListDef -> ListDef . Def ';'                        (rule 15)

	'main'         shift, and enter state 30
	L_ident        shift, and enter state 10

	Ident          goto state 27
	Main           goto state 33
	Def            goto state 34

State 33

	Program -> ListDef Main .                           (rule 11)

	%eof           reduce using rule 11


State 34

	ListDef -> ListDef Def . ';'                        (rule 15)

	';'            shift, and enter state 53


State 35

	Main -> 'main' '=' . 'print' Exp3 ';'               (rule 12)

	'print'        shift, and enter state 52


State 36

	Def -> Ident ListIdent . '=' Exp                    (rule 13)

	'='            shift, and enter state 51


State 37

	ListIdent -> Ident ListIdent .                      (rule 17)

	'='            reduce using rule 17
	%eof           reduce using rule 17


State 38

	Exp2 -> Exp2 Exp3 .                                 (rule 21)

	'('            reduce using rule 21
	')'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	';'            reduce using rule 21
	'<'            reduce using rule 21
	'else'         reduce using rule 21
	'then'         reduce using rule 21
	L_ident        reduce using rule 21
	L_integ        reduce using rule 21
	%eof           reduce using rule 21


State 39

	Exp1 -> Exp1 '+' . Exp2                             (rule 23)

	'('            shift, and enter state 17
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 13
	Exp2           goto state 50

State 40

	Exp1 -> Exp1 '-' . Exp2                             (rule 24)

	'('            shift, and enter state 17
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 13
	Exp2           goto state 49

State 41

	Exp1 -> Exp1 '<' . Exp2                             (rule 25)

	'('            shift, and enter state 17
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 13
	Exp2           goto state 48

State 42

	Exp -> 'if' Exp . 'then' Exp 'else' Exp             (rule 27)

	'then'         shift, and enter state 47


State 43

	Exp -> '\\' Ident . '->' Exp                        (rule 28)

	'->'           shift, and enter state 46


State 44

	Exp3 -> '(' Exp . ')'                               (rule 20)

	')'            shift, and enter state 45


State 45

	Exp3 -> '(' Exp ')' .                               (rule 20)

	'('            reduce using rule 20
	')'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	';'            reduce using rule 20
	'<'            reduce using rule 20
	'else'         reduce using rule 20
	'then'         reduce using rule 20
	L_ident        reduce using rule 20
	L_integ        reduce using rule 20
	%eof           reduce using rule 20


State 46

	Exp -> '\\' Ident '->' . Exp                        (rule 28)

	'('            shift, and enter state 17
	'\\'           shift, and enter state 18
	'if'           shift, and enter state 19
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 13
	Exp2           goto state 14
	Exp1           goto state 15
	Exp            goto state 57

State 47

	Exp -> 'if' Exp 'then' . Exp 'else' Exp             (rule 27)

	'('            shift, and enter state 17
	'\\'           shift, and enter state 18
	'if'           shift, and enter state 19
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 13
	Exp2           goto state 14
	Exp1           goto state 15
	Exp            goto state 56

State 48

	Exp2 -> Exp2 . Exp3                                 (rule 21)
	Exp1 -> Exp1 '<' Exp2 .                             (rule 25)

	'('            shift, and enter state 17
	')'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	';'            reduce using rule 25
	'<'            reduce using rule 25
	'else'         reduce using rule 25
	'then'         reduce using rule 25
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20
	%eof           reduce using rule 25

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 38

State 49

	Exp2 -> Exp2 . Exp3                                 (rule 21)
	Exp1 -> Exp1 '-' Exp2 .                             (rule 24)

	'('            shift, and enter state 17
	')'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	';'            reduce using rule 24
	'<'            reduce using rule 24
	'else'         reduce using rule 24
	'then'         reduce using rule 24
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20
	%eof           reduce using rule 24

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 38

State 50

	Exp2 -> Exp2 . Exp3                                 (rule 21)
	Exp1 -> Exp1 '+' Exp2 .                             (rule 23)

	'('            shift, and enter state 17
	')'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	';'            reduce using rule 23
	'<'            reduce using rule 23
	'else'         reduce using rule 23
	'then'         reduce using rule 23
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20
	%eof           reduce using rule 23

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 38

State 51

	Def -> Ident ListIdent '=' . Exp                    (rule 13)

	'('            shift, and enter state 17
	'\\'           shift, and enter state 18
	'if'           shift, and enter state 19
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 13
	Exp2           goto state 14
	Exp1           goto state 15
	Exp            goto state 55

State 52

	Main -> 'main' '=' 'print' . Exp3 ';'               (rule 12)

	'('            shift, and enter state 17
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 54

State 53

	ListDef -> ListDef Def ';' .                        (rule 15)

	'main'         reduce using rule 15
	L_ident        reduce using rule 15
	%eof           reduce using rule 15


State 54

	Main -> 'main' '=' 'print' Exp3 . ';'               (rule 12)

	';'            shift, and enter state 59


State 55

	Def -> Ident ListIdent '=' Exp .                    (rule 13)

	';'            reduce using rule 13
	%eof           reduce using rule 13


State 56

	Exp -> 'if' Exp 'then' Exp . 'else' Exp             (rule 27)

	'else'         shift, and enter state 58


State 57

	Exp -> '\\' Ident '->' Exp .                        (rule 28)

	')'            reduce using rule 28
	';'            reduce using rule 28
	'else'         reduce using rule 28
	'then'         reduce using rule 28
	%eof           reduce using rule 28


State 58

	Exp -> 'if' Exp 'then' Exp 'else' . Exp             (rule 27)

	'('            shift, and enter state 17
	'\\'           shift, and enter state 18
	'if'           shift, and enter state 19
	L_ident        shift, and enter state 10
	L_integ        shift, and enter state 20

	Ident          goto state 11
	Integer        goto state 12
	Exp3           goto state 13
	Exp2           goto state 14
	Exp1           goto state 15
	Exp            goto state 60

State 59

	Main -> 'main' '=' 'print' Exp3 ';' .               (rule 12)

	%eof           reduce using rule 12


State 60

	Exp -> 'if' Exp 'then' Exp 'else' Exp .             (rule 27)

	')'            reduce using rule 27
	';'            reduce using rule 27
	'else'         reduce using rule 27
	'then'         reduce using rule 27
	%eof           reduce using rule 27


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 30
Number of terminals: 16
Number of non-terminals: 20
Number of states: 61
