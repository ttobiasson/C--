-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Fun.Par where
import Fun.Abs
import Fun.Lex
import Fun.ErrM

}

%name pProgram Program
%name pMain Main
%name pDef Def
%name pListDef ListDef
%name pListIdent ListIdent
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '+' { PT _ (TS _ 3) }
  '-' { PT _ (TS _ 4) }
  '->' { PT _ (TS _ 5) }
  ';' { PT _ (TS _ 6) }
  '<' { PT _ (TS _ 7) }
  '=' { PT _ (TS _ 8) }
  '\\' { PT _ (TS _ 9) }
  'else' { PT _ (TS _ 10) }
  'if' { PT _ (TS _ 11) }
  'main' { PT _ (TS _ 12) }
  'print' { PT _ (TS _ 13) }
  'then' { PT _ (TS _ 14) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Program :: { Program }
Program : ListDef Main { Fun.Abs.Prog (reverse $1) $2 }
Main :: { Main }
Main : 'main' '=' 'print' Exp3 ';' { Fun.Abs.DMain $4 }
Def :: { Def }
Def : Ident ListIdent '=' Exp { Fun.Abs.DDef $1 $2 $4 }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def ';' { flip (:) $1 $2 }
ListIdent :: { [Ident] }
ListIdent : {- empty -} { [] } | Ident ListIdent { (:) $1 $2 }
Exp3 :: { Exp }
Exp3 : Ident { Fun.Abs.EId $1 }
     | Integer { Fun.Abs.EInt $1 }
     | '(' Exp ')' { $2 }
Exp2 :: { Exp }
Exp2 : Exp2 Exp3 { Fun.Abs.ECall $1 $2 } | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : Exp1 '+' Exp2 { Fun.Abs.EAdd $1 $3 }
     | Exp1 '-' Exp2 { Fun.Abs.ESub $1 $3 }
     | Exp1 '<' Exp2 { Fun.Abs.ELt $1 $3 }
     | Exp2 { $1 }
Exp :: { Exp }
Exp : 'if' Exp 'then' Exp 'else' Exp { Fun.Abs.EIf $2 $4 $6 }
    | '\\' Ident '->' Exp { Fun.Abs.EAbs $2 $4 }
    | Exp1 { $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

