{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
module Fun.Abs where

-- Haskell module generated by the BNF converter


import Data.Data (Data,Typeable)
import GHC.Generics (Generic)
newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)
data Program = Prog [Def] Main
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Main = DMain Exp
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Def = DDef Ident [Ident] Exp
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Exp
    = EId Ident
    | EInt Integer
    | EApp Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ELt Exp Exp
    | EIf Exp Exp Exp
    | EAbs Ident Exp
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

